import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
TOKEN = "8169122884:AAEMBsCJ0dFPhHhbo_rMSvLrbK4BI7tvgLw"
BOOSTY_LINK = "https://boosty.to/angel_summer"
CRYPTO_WALLET = "TCpF53TxJR7vGS8nBbMpdsPRd8Lj9rQdwC"

# –¶–µ–Ω—ã –∏ —Ç–∏–ø—ã —Ñ–æ—Ç–æ
PHOTOS = {
    'cute': {'price': '15 USDT', 'desc': '–ú–∏–ª–æ–µ —Ñ–æ—Ç–æ üòä'},
    'sexy': {'price': '15 USDT', 'desc': '–°–µ–∫—Å—É–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ üî•'}, 
    'bikini': {'price': '25 USDT', 'desc': '–ë–∏–∫–∏–Ω–∏ üëô'},
    'exclusive': {'price': '45 USDT', 'desc': '–≠–∫—Å–∫–ª—é–∑–∏–≤ üíé'}
}

def start(update: Update, context: CallbackContext) -> None:
    menu = [
        [InlineKeyboardButton("üì∏ –ú–æ–∏ —Ñ–æ—Ç–æ", callback_data='photos')],
        [InlineKeyboardButton("üåü Boosty", url=BOOSTY_LINK)],
        [InlineKeyboardButton("üíå –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", callback_data='donate')]
    ]
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —è Angel Summer üòò\n–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:",
        reply_markup=InlineKeyboardMarkup(menu)
    )

def handle_buttons(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    if query.data == 'photos':
        show_photos(query)
    elif query.data == 'donate':
        show_donate(query)
    elif query.data == 'back':
        start(update, context)
    elif query.data in PHOTOS:
        show_payment(query)

def show_photos(query):
    buttons = []
    for photo_type, info in PHOTOS.items():
        buttons.append([InlineKeyboardButton(
            f"{info['desc']} - {info['price']}", 
            callback_data=photo_type
        )])
    buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back')])
    
    query.edit_message_text(
        "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ç–æ üíã\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –µ–≥–æ –ª–∏—á–Ω–æ:",
        reply_markup=InlineKeyboardMarkup(buttons))

def show_donate(query):
    text = f"üíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞:\n\n{CRYPTO_WALLET}\n\n–°–ø–∞—Å–∏–±–æ! üòò"
    query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]]))

def show_payment(query):
    photo_type = query.data
    info = PHOTOS[photo_type]
    
    text = (f"üí≥ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {info['desc'].lower()}:\n"
            f"1. –ü–µ—Ä–µ–≤–µ–¥–∏ {info['price']} –Ω–∞ {CRYPTO_WALLET}\n"
            f"2. –ù–∞–ø–∏—à–∏ –º–Ω–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n\n"
            "–Ø –ø—Ä–∏—à–ª—é —Ñ–æ—Ç–æ –≤ –ª–∏—á–∫—É üíã")
    
    query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ö —Ñ–æ—Ç–æ", callback_data='photos')],
            [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='back')]
        ]))

def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CallbackQueryHandler(handle_buttons))
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
